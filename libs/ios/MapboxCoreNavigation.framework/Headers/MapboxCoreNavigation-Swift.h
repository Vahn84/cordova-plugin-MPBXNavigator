// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import CoreLocation;
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
/// An <code>AlertLevel</code> indicates the user’s general progress toward a step’s maneuver point. A change to the current alert level is often an opportunity to present the user with a visual or voice notification about the upcoming maneuver.
typedef SWIFT_ENUM_NAMED(NSInteger, MBAlertLevel, "AlertLevel") {
/// Default <code>AlertLevel</code>
  MBAlertLevelNone = 0,
/// The user has started the route.
  MBAlertLevelDepart = 1,
/// The user has recently completed a step.
  MBAlertLevelLow = 2,
/// The user is approaching the maneuver.
  MBAlertLevelMedium = 3,
/// The user is at or very close to the maneuver point
  MBAlertLevelHigh = 4,
/// The user has completed the route.
  MBAlertLevelArrive = 5,
};


@interface CLLocation (SWIFT_EXTENSION(MapboxCoreNavigation))
@end

@protocol MBRouteControllerDelegate;
@class MBDirections;
@class CLLocationManager;
@class MBRouteProgress;
@class MBRoute;

/// A <code>RouteController</code> tracks the user’s progress along a route, posting notifications as the user reaches significant points along the route. On every location update, the route controller evaluates the user’s location, determining whether the user remains on the route. If not, the route controller calculates a new route.
SWIFT_CLASS_NAMED("RouteController")
@interface MBRouteController : NSObject
/// The route controller’s delegate.
@property (nonatomic, weak) id <MBRouteControllerDelegate> _Nullable delegate;
/// The Directions object used to create the route.
@property (nonatomic, readonly, strong) MBDirections * _Nonnull directions;
/// The location manager.
@property (nonatomic, strong) CLLocationManager * _Nonnull locationManager;
/// Details about the user’s progress along the current route, leg, and step.
@property (nonatomic, strong) MBRouteProgress * _Nonnull routeProgress;
/// If true, the user puck is snapped to closest location on the route.
@property (nonatomic) BOOL snapsUserLocationAnnotationToRoute;
@property (nonatomic) BOOL simulatesLocationUpdates;
/// Intializes a new <code>RouteController</code>.
/// \param route The route to follow.
///
/// \param directions The Directions object that created <code>route</code>.
///
- (nonnull instancetype)initWithRoute:(MBRoute * _Nonnull)route directions:(MBDirections * _Nonnull)directions OBJC_DESIGNATED_INITIALIZER;
/// Starts monitoring the user’s location along the route.
/// Will continue monitoring until <code>suspendLocationUpdates()</code> is called.
- (void)resume;
/// Stops monitoring the user’s location along the route.
- (void)suspendLocationUpdates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface MBRouteController (SWIFT_EXTENSION(MapboxCoreNavigation)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (BOOL)userIsOnRoute:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>RouteControllerDelegate</code> class provides methods for responding to significant occasions during the user’s traversal of a route monitored by a <code>RouteController</code>.
SWIFT_PROTOCOL_NAMED("RouteControllerDelegate")
@protocol MBRouteControllerDelegate
@optional
/// Returns whether the route controller should be allowed to calculate a new route.
/// If implemented, this method is called as soon as the route controller detects that the user is off the predetermined route. Implement this method to conditionally prevent rerouting. If this method returns <code>true</code>, <code>routeController(_:willRerouteFrom:)</code> will be called immediately afterwards.
/// \param routeController The route controller that has detected the need to calculate a new route.
///
/// \param location The user’s current location.
///
///
/// returns:
/// True to allow the route controller to calculate a new route; false to keep tracking the current route.
- (BOOL)routeController:(MBRouteController * _Nonnull)routeController shouldRerouteFromLocation:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Called immediately before the route controller calculates a new route.
/// This method is called after <code>routeController(_:shouldRerouteFrom:)</code> is called, simultaneously with the <code>RouteControllerWillReroute</code> notification being posted, and before <code>routeController(_:didRerouteAlong:)</code> is called.
/// \param routeController The route controller that will calculate a new route.
///
/// \param location The user’s current location.
///
- (void)routeController:(MBRouteController * _Nonnull)routeController willRerouteFromLocation:(CLLocation * _Nonnull)location;
/// Called immediately after the route controller receives a new route.
/// This method is called after <code>routeController(_:willRerouteFrom:)</code> and simultaneously with the <code>RouteControllerDidReroute</code> notification being posted.
/// \param routeController The route controller that has calculated a new route.
///
/// \param route The new route.
///
- (void)routeController:(MBRouteController * _Nonnull)routeController didRerouteAlongRoute:(MBRoute * _Nonnull)route;
/// Called when the route controller fails to receive a new route.
/// This method is called after <code>routeController(_:willRerouteFrom:)</code> and simultaneously with the <code>RouteControllerDidFailToReroute</code> notification being posted.
/// \param routeController The route controller that has calculated a new route.
///
/// \param error An error raised during the process of obtaining a new route.
///
- (void)routeController:(MBRouteController * _Nonnull)routeController didFailToRerouteWithError:(NSError * _Nonnull)error;
@end

@class MBRouteLeg;
@class MBRouteStep;
@class MBRouteStepProgress;

/// <code>RouteLegProgress</code> stores the user’s progress along a route leg.
SWIFT_CLASS_NAMED("RouteLegProgress")
@interface MBRouteLegProgress : NSObject
@property (nonatomic, readonly, strong) MBRouteLeg * _Nonnull leg;
/// Index representing the current step
@property (nonatomic) NSInteger stepIndex;
/// Total distance traveled in meters along current leg
@property (nonatomic, readonly) CLLocationDistance distanceTraveled;
/// Duration remaining in seconds on current leg
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
/// Number between 0 and 1 representing how far along the current leg the user has traveled.
@property (nonatomic, readonly) double fractionTraveled;
@property (nonatomic) enum MBAlertLevel alertUserLevel;
- (MBRouteStep * _Nullable)stepBefore:(MBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
- (MBRouteStep * _Nullable)stepAfter:(MBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>Step</code> before the current step.
/// If there is no <code>priorStep</code>, nil is returned.
@property (nonatomic, readonly, strong) MBRouteStep * _Nullable priorStep;
/// Returns number representing current <code>Step</code> for the leg the user is on.
@property (nonatomic, readonly, strong) MBRouteStep * _Nonnull currentStep;
/// Returns the upcoming <code>Step</code>.
/// If there is no <code>upcomingStep</code>, nil is returned.
@property (nonatomic, readonly, strong) MBRouteStep * _Nullable upComingStep;
/// Returns step 2 steps ahead.
/// If there is no <code>followOnStep</code>, nil is returned.
@property (nonatomic, readonly, strong) MBRouteStep * _Nullable followOnStep;
/// Return bool whether step provided is the current <code>Step</code> the user is on.
- (BOOL)isCurrentStep:(MBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) MBRouteStepProgress * _Nonnull currentStepProgress;
- (nonnull instancetype)initWithLeg:(MBRouteLeg * _Nonnull)leg stepIndex:(NSInteger)stepIndex OBJC_DESIGNATED_INITIALIZER;
/// Returns an array of <code>CLLocationCoordinate2D</code> of the prior, current and upcoming step geometry
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull nearbyCoordinates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class MBWaypoint;

/// <code>RouteProgress</code> stores the user’s progress along a route.
SWIFT_CLASS_NAMED("RouteProgress")
@interface MBRouteProgress : NSObject
@property (nonatomic, readonly, strong) MBRoute * _Nonnull route;
/// Index representing current leg
@property (nonatomic) NSInteger legIndex;
/// If waypoints are provided in the <code>Route</code>, this will contain which leg the user is on.
@property (nonatomic, readonly, strong) MBRouteLeg * _Nonnull currentLeg;
/// Total distance traveled by user along all legs.
@property (nonatomic, readonly) CLLocationDistance distanceTraveled;
/// Total seconds remaining on all legs
@property (nonatomic, readonly) CLLocationDistance durationRemaining;
/// Number between 0 and 1 representing how far along the <code>Route</code> the user has traveled.
@property (nonatomic, readonly) double fractionTraveled;
/// Total distance remaining in meters along route.
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
@property (nonatomic, readonly, copy) NSArray<MBWaypoint *> * _Nonnull remainingWaypoints;
@property (nonatomic, strong) MBRouteLegProgress * _Null_unspecified currentLegProgress;
- (nonnull instancetype)initWithRoute:(MBRoute * _Nonnull)route legIndex:(NSInteger)legIndex OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// <code>RouteStepProgress</code> stores the user’s progress along a route step.
SWIFT_CLASS_NAMED("RouteStepProgress")
@interface MBRouteStepProgress : NSObject
@property (nonatomic, readonly, strong) MBRouteStep * _Nonnull step;
/// Returns distance user has traveled along current step.
@property (nonatomic) CLLocationDistance distanceTraveled;
/// Total distance in meters remaining on current stpe
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
/// Number between 0 and 1 representing fraction of current step traveled
@property (nonatomic, readonly) double fractionTraveled;
/// Number of seconds remaining on current step
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
- (nonnull instancetype)initWithStep:(MBRouteStep * _Nonnull)step OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
